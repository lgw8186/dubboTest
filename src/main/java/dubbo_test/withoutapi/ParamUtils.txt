package dubbo_test.withoutapi;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.ParserConfig;

public class ParamUtils {
	
	static {
		ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
	}
	
	/**
	 * dubbo接口参数
	 * @param ps
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public static List<Map<String, Object>> getDubboParameters(List<Param> ps) {
		List<Map<String, Object>> parameters = new ArrayList<>();
		for (Param vo : ps) {
			// 获取参数类型
			String paramType = ParamTypeEnum.getValueByKey(vo.getParamName());
			// 1、基本类型
			if (StringUtils.isNotEmpty(paramType)) {
				Map<String, Object> mBase = new HashMap<>();
				mBase.put("ParamType", paramType);
				mBase.put("Object", vo.getParamValue());
				parameters.add(Integer.parseInt(vo.getParamId()), mBase);
			}
			// 2、对象类型(根据填写类型不包含List)
			else if (StringUtils.isEmpty(paramType)
					&& !"List".equals(vo.getParamName())
					&& !"Map".equals(vo.getParamName())) {
				JSONObject j = JSON.parseObject(vo.getParamValue());
				Map<String, Object> m = addObj(j);
				Map<String, Object> mObj = new HashMap<>();
				mObj.put("ParamType", vo.getParamName());
				mObj.put("Object", m);
				parameters.add(Integer.parseInt(vo.getParamId()), mObj);
			}
			// 3、集合类型List
			else if (StringUtils.isEmpty(paramType)
					&& "List".equals(vo.getParamName())) {
				Map<String, Object> mList = new HashMap<>();
				mList.put("ParamType", "java.util.List");
				// 对象集合类型
				if (vo.getParamValue().startsWith("[{")) {
					JSONArray ja = JSONArray.parseArray(vo.getParamValue());
					List l = addObjToList(ja);
					mList.put("Object", l);
				}
				// 基本类型集合
				else if (vo.getParamValue().startsWith("[")) {
					JSONArray ja = JSONArray.parseArray(vo.getParamValue());
					List list = addBaseToList(ja);
					mList.put("Object", list);
				}
				parameters.add(Integer.parseInt(vo.getParamId()), mList);
			}
			// 4、集合类型Map
			else if (StringUtils.isEmpty(paramType)
					&& "Map".equals(vo.getParamName())) {
				Map<String, Object> mMap = new HashMap<>();
				mMap.put("ParamType", "java.util.Map");
				JSONObject obj = JSON.parseObject(vo.getParamValue());
				mMap.put("Object", obj);
				parameters.add(Integer.parseInt(vo.getParamId()), mMap);
			}
		}
		return parameters;
	}
	

	@SuppressWarnings("rawtypes")
	public static Map<String,Object> addObj(JSONObject jo){
		Map<String,Object> map = new HashMap<>();		
		for(String s : jo.keySet()){
			if("@type".equals(s))
				continue;			
			String value = jo.getString(s);
			
			if(StringUtils.isEmpty(value))
				continue;
			if(value.startsWith("[{")){
				JSONArray ja = JSONArray.parseArray(value);
				List l = addObjToList(ja);				
				map.put(s, l);
			}else if(value.startsWith("{")){
				JSONObject j =JSON.parseObject(value);
				Map<String,Object> m = addObj(j);
				map.put(s, m);
			}else if(value.startsWith("[")){
				JSONArray ja = JSONArray.parseArray(value);
				List list = addBaseToList(ja);
				map.put(s, list);
			}else{
				map.put(s,jo.get(s));
			}			
		}
		return map;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static List addObjToList(JSONArray jsonArr){
		List list = new ArrayList();
		for(int i=0;i<jsonArr.size();i++){			
			JSONObject jo = jsonArr.getJSONObject(i);
			Map<String,Object> m = addObj(jo);			
			list.add(m);
		}
		return list;
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public static List addBaseToList(JSONArray jsonArr){
		List list = new ArrayList();
		for(int i=0;i<jsonArr.size();i++){
			list.add(jsonArr.getString(i));
		}
		return list;
	}
	
}
